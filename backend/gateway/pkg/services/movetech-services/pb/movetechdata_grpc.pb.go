// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.3
// source: pkg/pb/movetechdata.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MoveTechAdminProtoServiceClient is the client API for MoveTechAdminProtoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MoveTechAdminProtoServiceClient interface {
	SaveProduct(ctx context.Context, in *SaveProductRequest, opts ...grpc.CallOption) (*SaveProductResponse, error)
	SaveFreebies(ctx context.Context, in *SaveFreebiesRequest, opts ...grpc.CallOption) (*SaveFreebiesResponse, error)
	GetAllFreebies(ctx context.Context, in *GetAllFreebiesRequest, opts ...grpc.CallOption) (*GetAllFreebiesResponse, error)
	GetAllFreebiesById(ctx context.Context, in *GetAllFreebiesRequestById, opts ...grpc.CallOption) (*GetAllFreebiesResponseById, error)
	UpdateFreebies(ctx context.Context, in *UpdateFreebiesRequest, opts ...grpc.CallOption) (*UpdateFreebiesResponse, error)
	UpdateFreebiesQuantity(ctx context.Context, in *UpdateFreebiesQuantityRequest, opts ...grpc.CallOption) (*UpdateFreebiesQuantityResponse, error)
	UpdateFreebiesStatus(ctx context.Context, in *UpdateFreebiesStatusRequest, opts ...grpc.CallOption) (*UpdateFreebiesStatusResponse, error)
}

type moveTechAdminProtoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMoveTechAdminProtoServiceClient(cc grpc.ClientConnInterface) MoveTechAdminProtoServiceClient {
	return &moveTechAdminProtoServiceClient{cc}
}

func (c *moveTechAdminProtoServiceClient) SaveProduct(ctx context.Context, in *SaveProductRequest, opts ...grpc.CallOption) (*SaveProductResponse, error) {
	out := new(SaveProductResponse)
	err := c.cc.Invoke(ctx, "/api.MoveTechAdminProtoService/SaveProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moveTechAdminProtoServiceClient) SaveFreebies(ctx context.Context, in *SaveFreebiesRequest, opts ...grpc.CallOption) (*SaveFreebiesResponse, error) {
	out := new(SaveFreebiesResponse)
	err := c.cc.Invoke(ctx, "/api.MoveTechAdminProtoService/SaveFreebies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moveTechAdminProtoServiceClient) GetAllFreebies(ctx context.Context, in *GetAllFreebiesRequest, opts ...grpc.CallOption) (*GetAllFreebiesResponse, error) {
	out := new(GetAllFreebiesResponse)
	err := c.cc.Invoke(ctx, "/api.MoveTechAdminProtoService/GetAllFreebies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moveTechAdminProtoServiceClient) GetAllFreebiesById(ctx context.Context, in *GetAllFreebiesRequestById, opts ...grpc.CallOption) (*GetAllFreebiesResponseById, error) {
	out := new(GetAllFreebiesResponseById)
	err := c.cc.Invoke(ctx, "/api.MoveTechAdminProtoService/GetAllFreebiesById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moveTechAdminProtoServiceClient) UpdateFreebies(ctx context.Context, in *UpdateFreebiesRequest, opts ...grpc.CallOption) (*UpdateFreebiesResponse, error) {
	out := new(UpdateFreebiesResponse)
	err := c.cc.Invoke(ctx, "/api.MoveTechAdminProtoService/UpdateFreebies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moveTechAdminProtoServiceClient) UpdateFreebiesQuantity(ctx context.Context, in *UpdateFreebiesQuantityRequest, opts ...grpc.CallOption) (*UpdateFreebiesQuantityResponse, error) {
	out := new(UpdateFreebiesQuantityResponse)
	err := c.cc.Invoke(ctx, "/api.MoveTechAdminProtoService/UpdateFreebiesQuantity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moveTechAdminProtoServiceClient) UpdateFreebiesStatus(ctx context.Context, in *UpdateFreebiesStatusRequest, opts ...grpc.CallOption) (*UpdateFreebiesStatusResponse, error) {
	out := new(UpdateFreebiesStatusResponse)
	err := c.cc.Invoke(ctx, "/api.MoveTechAdminProtoService/UpdateFreebiesStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MoveTechAdminProtoServiceServer is the server API for MoveTechAdminProtoService service.
// All implementations must embed UnimplementedMoveTechAdminProtoServiceServer
// for forward compatibility
type MoveTechAdminProtoServiceServer interface {
	SaveProduct(context.Context, *SaveProductRequest) (*SaveProductResponse, error)
	SaveFreebies(context.Context, *SaveFreebiesRequest) (*SaveFreebiesResponse, error)
	GetAllFreebies(context.Context, *GetAllFreebiesRequest) (*GetAllFreebiesResponse, error)
	GetAllFreebiesById(context.Context, *GetAllFreebiesRequestById) (*GetAllFreebiesResponseById, error)
	UpdateFreebies(context.Context, *UpdateFreebiesRequest) (*UpdateFreebiesResponse, error)
	UpdateFreebiesQuantity(context.Context, *UpdateFreebiesQuantityRequest) (*UpdateFreebiesQuantityResponse, error)
	UpdateFreebiesStatus(context.Context, *UpdateFreebiesStatusRequest) (*UpdateFreebiesStatusResponse, error)
	mustEmbedUnimplementedMoveTechAdminProtoServiceServer()
}

// UnimplementedMoveTechAdminProtoServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMoveTechAdminProtoServiceServer struct {
}

func (UnimplementedMoveTechAdminProtoServiceServer) SaveProduct(context.Context, *SaveProductRequest) (*SaveProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveProduct not implemented")
}
func (UnimplementedMoveTechAdminProtoServiceServer) SaveFreebies(context.Context, *SaveFreebiesRequest) (*SaveFreebiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveFreebies not implemented")
}
func (UnimplementedMoveTechAdminProtoServiceServer) GetAllFreebies(context.Context, *GetAllFreebiesRequest) (*GetAllFreebiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllFreebies not implemented")
}
func (UnimplementedMoveTechAdminProtoServiceServer) GetAllFreebiesById(context.Context, *GetAllFreebiesRequestById) (*GetAllFreebiesResponseById, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllFreebiesById not implemented")
}
func (UnimplementedMoveTechAdminProtoServiceServer) UpdateFreebies(context.Context, *UpdateFreebiesRequest) (*UpdateFreebiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFreebies not implemented")
}
func (UnimplementedMoveTechAdminProtoServiceServer) UpdateFreebiesQuantity(context.Context, *UpdateFreebiesQuantityRequest) (*UpdateFreebiesQuantityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFreebiesQuantity not implemented")
}
func (UnimplementedMoveTechAdminProtoServiceServer) UpdateFreebiesStatus(context.Context, *UpdateFreebiesStatusRequest) (*UpdateFreebiesStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFreebiesStatus not implemented")
}
func (UnimplementedMoveTechAdminProtoServiceServer) mustEmbedUnimplementedMoveTechAdminProtoServiceServer() {
}

// UnsafeMoveTechAdminProtoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MoveTechAdminProtoServiceServer will
// result in compilation errors.
type UnsafeMoveTechAdminProtoServiceServer interface {
	mustEmbedUnimplementedMoveTechAdminProtoServiceServer()
}

func RegisterMoveTechAdminProtoServiceServer(s grpc.ServiceRegistrar, srv MoveTechAdminProtoServiceServer) {
	s.RegisterService(&MoveTechAdminProtoService_ServiceDesc, srv)
}

func _MoveTechAdminProtoService_SaveProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoveTechAdminProtoServiceServer).SaveProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.MoveTechAdminProtoService/SaveProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoveTechAdminProtoServiceServer).SaveProduct(ctx, req.(*SaveProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MoveTechAdminProtoService_SaveFreebies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveFreebiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoveTechAdminProtoServiceServer).SaveFreebies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.MoveTechAdminProtoService/SaveFreebies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoveTechAdminProtoServiceServer).SaveFreebies(ctx, req.(*SaveFreebiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MoveTechAdminProtoService_GetAllFreebies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllFreebiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoveTechAdminProtoServiceServer).GetAllFreebies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.MoveTechAdminProtoService/GetAllFreebies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoveTechAdminProtoServiceServer).GetAllFreebies(ctx, req.(*GetAllFreebiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MoveTechAdminProtoService_GetAllFreebiesById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllFreebiesRequestById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoveTechAdminProtoServiceServer).GetAllFreebiesById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.MoveTechAdminProtoService/GetAllFreebiesById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoveTechAdminProtoServiceServer).GetAllFreebiesById(ctx, req.(*GetAllFreebiesRequestById))
	}
	return interceptor(ctx, in, info, handler)
}

func _MoveTechAdminProtoService_UpdateFreebies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFreebiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoveTechAdminProtoServiceServer).UpdateFreebies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.MoveTechAdminProtoService/UpdateFreebies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoveTechAdminProtoServiceServer).UpdateFreebies(ctx, req.(*UpdateFreebiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MoveTechAdminProtoService_UpdateFreebiesQuantity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFreebiesQuantityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoveTechAdminProtoServiceServer).UpdateFreebiesQuantity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.MoveTechAdminProtoService/UpdateFreebiesQuantity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoveTechAdminProtoServiceServer).UpdateFreebiesQuantity(ctx, req.(*UpdateFreebiesQuantityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MoveTechAdminProtoService_UpdateFreebiesStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFreebiesStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoveTechAdminProtoServiceServer).UpdateFreebiesStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.MoveTechAdminProtoService/UpdateFreebiesStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoveTechAdminProtoServiceServer).UpdateFreebiesStatus(ctx, req.(*UpdateFreebiesStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MoveTechAdminProtoService_ServiceDesc is the grpc.ServiceDesc for MoveTechAdminProtoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MoveTechAdminProtoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.MoveTechAdminProtoService",
	HandlerType: (*MoveTechAdminProtoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SaveProduct",
			Handler:    _MoveTechAdminProtoService_SaveProduct_Handler,
		},
		{
			MethodName: "SaveFreebies",
			Handler:    _MoveTechAdminProtoService_SaveFreebies_Handler,
		},
		{
			MethodName: "GetAllFreebies",
			Handler:    _MoveTechAdminProtoService_GetAllFreebies_Handler,
		},
		{
			MethodName: "GetAllFreebiesById",
			Handler:    _MoveTechAdminProtoService_GetAllFreebiesById_Handler,
		},
		{
			MethodName: "UpdateFreebies",
			Handler:    _MoveTechAdminProtoService_UpdateFreebies_Handler,
		},
		{
			MethodName: "UpdateFreebiesQuantity",
			Handler:    _MoveTechAdminProtoService_UpdateFreebiesQuantity_Handler,
		},
		{
			MethodName: "UpdateFreebiesStatus",
			Handler:    _MoveTechAdminProtoService_UpdateFreebiesStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/pb/movetechdata.proto",
}
